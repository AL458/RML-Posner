function main_GD_MMSE(processn,subj_start,subj_end)
%restoredefaultpath
try load(fullfile('Input','estimated_parameters'))
catch
    estimated_parameters = [];
    estimated_parameters.Act.temp = 0.6;
    estimated_parameters.Act.alpha = 0.1;
end

addpath('Input')
addpath('Scripts')
addpath('Scripts/All_scripts')
subj_array = subj_start:subj_end;

subj_out = [];
subj_out.param = cell(size(subj_array));
subj_out.DA = zeros(size(subj_array));
subj_out.NE = zeros(size(subj_array));
subj_out.HT = zeros(size(subj_array));
subj_out.LL_opt = zeros(size(subj_array));
subj_out.opt_var = zeros(size(subj_array));

param = define_GD_pars(processn);
temp = fileparts(param.current.outpath);
if ~exist(temp,'dir')
    mkdir(temp)
end
sbehav=importdata(param.current.path);
try sbehav = sbehav.sbehav;
catch
end
    
for subj = 1:length(subj_array)
    % Set trialtypes for each participant
    [trialtypes,~] = load_RT('Data_Sapienza.mat');
    % Get the true RTs for each participant from sbehav
    curr_subj_data = sbehav{1,subj_array(subj)};
    RT_true = curr_subj_data.RT;
    disp(['Subj ' num2str(subj_array(subj))])
    tic
    % Get the gradient descent parameters for the current participant
    param = define_GD_pars(processn);
    sbehav_curr = load('Output/sbehav.mat');
    % Set parameters from current participant in param variable
    param.current.sbehavdata = sbehav_curr.sbehav{1};
    param.current.trialtypes = trialtypes;
    param.current.subj = subj_array(subj);
    param.current.RT_true = RT_true;
    if size(RT_true,2)>1
        param.current.RT_true = sum(RT_true)';
    end
    % Get loc (the location in parameter space), optover (a variable
    % indicating which parameters to optimize over, and MMSE (the variable
    % to optimize) for the initial location
    [loc,optover,MMSE] = set_first_loc_MMSE(param,estimated_parameters);
    param.optover = optover;
    while 1 
        % Get gradient
        grad = get_gradient_MMSE(param,loc,MMSE,optover);
        % Get next location in parameter space, and the correspo
        [loc_next,MMSE_next,param] = optimize_gradient_MMSE(param,grad,loc,MMSE);
        [param, stop,MMSE_next] = test_stopping_MMSE(param,loc,MMSE,loc_next,MMSE_next);
        if param.show_outcome
            loc_next(optover==1);
            MMSE_next;
        end
        if stop == 1
            break
        end
        [param,loc,MMSE] = update_vars_MMSE(param,loc_next,MMSE_next);
    end
    [param, MMSE_opt,loc_opt,opt_boost] = test_output_MMSE(param,loc_next,MMSE_next);
    subj_out.param{subj} = param;
    if param.show_outcome
        loc_opt
        MMSE_opt
    end
    subj_out.NE(subj) = loc_opt(3);
    subj_out.DA(subj) = loc_opt(2);
    subj_out.HT(subj) = loc_opt(1);
    subj_out.LL_opt(subj) = MMSE_opt;
    subj_out.time(subj) = toc;
    subj_out.boost{subj} = opt_boost;
    save(strcat(param.current.outpath),'subj_out')    
end
rmpath('Input')
rmpath('Scripts')
rmpath('Scripts/All_scripts')
end

